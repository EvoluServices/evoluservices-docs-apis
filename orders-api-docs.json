{
  "openapi": "3.0.1",
  "info": {
    "description": "Evoluservices Orders API make it easy to create links for customers to pay merchants for services or products purchased in the digital world. It also allows you to consult the status of payments, the expected settlement dates of the transactions made and the payment methods available. For this sample, you can use the `orders:123mudar` credentials to test the authorization filters.",
    "version": "2.0.0",
    "title": "Evoluservices Orders API",
    "contact": {
      "email": "integracoes@evoluservices.com"
    }
  },
  "servers": [
    {
      "url":"https://sandbox.evoluservices.com "
    },
    {
      "url":"https://evcash-latest.staging.evoluservices.com"
    }
  ],
  "tags": [
    {
      "name": "payment-methods",
      "description": "Gets the availables payment methods for specified merchant"
    },
    {
      "name": "orders",
      "description": "Operations to create a new order and query existing ones"
    }
  ],
  "paths": {
    "/api/payment-methods": {
      "get": {
        "tags": [
          "payment-methods"
        ],
        "summary": "Get the available payment methods for merchant",
        "operationId": "paymentMethods",
        "parameters": [
          {
            "in": "query",
            "name": "paymentMethods.amount",
            "schema": {
              "type": "string"
            },
            "description": "Payment value"
          },
          {
            "in": "query",
            "name": "paymentMethods.merchantCode",
            "schema": {
              "type": "string"
            },
            "description": "Merchant identifier code"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodsOutputDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Merchant not found"
          },
          "422": {
            "description": "Integration error"
          },
          "500": {
            "description": "Server internal error"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/api/orders": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Create a new order and submits for the approval",
        "operationId": "createOrders",
        "requestBody": {
          "description": "Object containing the information for order request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientsOrderInputDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientsOrderOutputDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Merchant not found"
          },
          "422": {
            "description": "Integration error"
          },
          "500": {
            "description": "Server internal error"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    },
    "/api/orders/{uuid}": {
      "get": {
        "tags": [
          "orders"
        ],
        "parameters": [
          {
            "required": true,
            "in": "path",
            "name": "uuid",
            "schema": {
              "type": "string"
            },
            "description": "Payment Link's Uuid"
          }
        ],
        "summary": "Consults a payment link given its uuid",
        "operationId": "consultOrder",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientsOrderTransactionsDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation exception"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Order not found"
          },
          "422": {
            "description": "Integration error"
          },
          "500": {
            "description": "Server internal error"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "PaymentMethodsInputDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "example": "10000"
          },
          "merchantCode": {
            "type": "string",
            "example": "AVD242AN"
          }
        }
      },
      "PaymentMethodsOutputDto": {
        "type": "object",
        "properties": {
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethod"
            }
          }
        }
      },
      "PaymentMethod": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "CREDIT"
          },
          "paymentOption": {
            "type": "object",
            "$ref": "#/components/schemas/PaymentOption"
          }
        }
      },
      "PaymentOption": {
        "type": "object",
        "properties": {
          "maxInstallments": {
            "type": "number",
            "example": "12"
          },
          "paymentBrands": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "VISA, MASTER, ELO"
            }
          }
        }
      },
      "ClientsOrderInputDto": {
        "type": "object",
        "properties": {
          "order": {
            "type": "object",
            "properties": {
              "reference": {
                "type": "string",
                "example": "123CLIENTS"
              },
              "redirectUrl": {
                "type": "string",
                "example": "https://example.com/callback",
                "description": "Redirect URL after order payment. Make a `POST` callback with the format `x-www-form-urlencoded` and with the `uuid` and` transactionNumber` parameters."
              },
              "amount": {
                "type": "string",
                "example": "10000"
              },
              "maxInstallments": {
                "type": "number",
                "example": "2"
              },
              "merchantCode": {
                "type": "string",
                "example": "A1B2C3"
              },
              "customerName": {
                "type": "string",
                "example": "Rodrigo"
              },
              "customerDocument": {
                "type": "string",
                "example": "01234567890"
              },
              "recurrent": {
                "type": "boolean",
                "example": true
              },
              "recurrenceType": {
                "type": "string",
                "enum": [
                  "MONTHLY",
                  "FLEXIBLE"
                ]
              },
              "quantityCharges": {
                "type": "number",
                "example": "10"
              },
              "frequency": {
                "type": "number",
                "example": "30"
              }
            }
          }
        }
      },
      "ClientsOrderOutputDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "example": "e2ba235d-0b30-4edc-981d-e2c222763aee"
          },
          "payUrl": {
            "type": "string",
            "example": "api.evoluservices.com/orders/pay"
          },
          "reference": {
            "type": "string",
            "example": "123CLIENTS"
          },
          "status": {
            "type": "string",
            "enum": [
              "APPROVED",
              "CANCELED",
              "PENDING"
            ]
          }
        }
      },
      "ClientsOrderTransactionsDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "example": "e2ba235d-0b30-4edc-981d-e2c222763aee"
          },
          "reference": {
            "type": "string",
            "example": "123CLIENTS"
          },
          "status": {
            "type": "string",
            "enum": [
              "APPROVED",
              "CANCELED",
              "PENDING"
            ]
          },
          "transactionList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientsTransactionDto"
            }
          }
        }
      },
      "ClientsTransactionDto": {
        "type": "object",
        "properties": {
          "number": {
            "type": "number",
            "example": "12345678909"
          },
          "status": {
            "type": "string",
            "enum": [
              "APPROVED",
              "CANCELLED",
              "ABORTED",
              "ABORTED_BY_MERCHANT",
              "PARTIALLY_CANCELED"
            ],
            "description": "Besides the values below, we have some other possible status for internal control, for example: COMPLETE, INCOMPLETE, CANCEL_REQUESTED, etc, but they should not be considered as expected values because they are extremely volatile."
          },
          "amount": {
            "type": "number",
            "example": "100.00"
          },
          "installments": {
            "type": "number",
            "example": "2"
          },
          "paymentBrand": {
            "type": "string",
            "enum": [
              "VISA_CREDITO",
              "VISA_ELECTRON",
              "MASTERCARD",
              "MAESTRO",
              "AMEX",
              "DINERS",
              "HIPERCARD",
              "AURA",
              "SOROCRED",
              "BANRISUL",
              "ELO",
              "SICREDI",
              "ELO_DEBITO",
              "BRADESCO",
              "HIPER",
              "AGIPLAN",
              "BANESCARD",
              "CREDZ",
              "JCB",
              "CABAL",
              "MAIS",
              "CHEQUE_TELECHEQUE",
              "CHEQUE_CREDITALL",
              "BOLETO",
              "BANESCARD_DEBITO",
              "CABAL_DEBITO",
              "HIPER_DEBITO",
              "REDESHOP"
            ]
          },
          "paymentQuantity": {
            "type": "number",
            "example": "3"
          },
          "nsu": {
            "type": "string",
            "example": "993485982"
          },
          "authorizationNumber": {
            "type": "string",
            "example": "470216"
          },
          "customer": {
            "type": "object",
            "$ref": "#/components/schemas/SubjectIdentifierDto"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientsTransactionPaymentDto"
            }
          }
        }
      },
      "SubjectIdentifierDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Jose da Silva"
          },
          "document": {
            "type": "string",
            "example": "123.456.789-09"
          }
        }
      },
      "ClientsTransactionPaymentDto": {
        "type": "object",
        "properties": {
          "number": {
            "type": "number",
            "example": "12345678909"
          },
          "amount": {
            "type": "number",
            "example": "100.00"
          },
          "status": {
            "type": "string",
            "enum": [
              "PAYED",
              "UNPAID",
              "ANTICIPATION_REQUESTED",
              "ANTICIPATED",
              "CANCEL_REQUESTED",
              "CANCELLED"
            ]
          },
          "payDate": {
            "type": "string",
            "example": "01/01/2001",
            "description": "Describes the date when the payment was effectively done or, if it wasn't payed yet, shows the expected date."
          },
          "merchant": {
            "type": "object",
            "$ref": "#/components/schemas/SubjectIdentifierDto"
          }
        }
      }
    },
    "securitySchemes": {
      "BasicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}